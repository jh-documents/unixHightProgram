s t a t和f s t a t函数返回一个包含所有文件属性的信息结构.
不能出现在文件名中的字符只有两个，斜线( / )和空操作符（n u l l）。
点引用当前目录，点-点则引用父目录。在最高层次的根目录中，点-点与点相同。
因为各种不同U N I X系统的目录项的实际格式是不一样的，所以使用函数o p e n d i r, readdir
和c l o s e d i r处理目录。
? opendir函数返回指向D I R结构的指针，并将该指针传向r e a d d i r函数。我们并不关心D I R
结构中包含了什么。然后，在循环中调用r e a d d i r来读每个目录项。它返回一个指向d i r e n t结
构的指针，而当目录中已无目录项可读时则返回n u l l指针。在d i r e n t结构中取出的只是每个
目录项的名字( d _ n a m e )。使用该名字，此后就可调用s t a t函数(见4 . 2节)以决定该文件的所有
属性。
? 调用了两个自编的函数来对错误进行处理：e r r _ s y s和e r r _ q u i t。从上面的输出中可以看到，
e r r _ s y s函数打印一条消息（“Permission denied(许可权拒绝)”或“Not a directory(不是一个目
录)”)，说明遇到了什么类型的错误。这两个出错处理函数在附录B中说明， 1 . 7节将更多地叙
述出错处理。这两个出错处理函数在附录B中说明1 . 7节将更详细地叙述出错处理。
文字描述符是一个小的非负整数，内核用以标识一个特定进程正在存访的文件。当内核打
开一个现存文件或创建一个新文件时，它就返回一个文件描述符。当读、写文件时，就可使
用它。

按惯例，参数0的意思是
正常结束，参数值1～2 5 5则表示出错

头文件< u n i s t d . h > ( o u r h d r. h中包含了此头文件)及两个常数S T D I N _ F I L E N O和S T D O U T _
F I L E N O是P O S I X标准的一部分（下一章将对此作更多的说明）。

，f g e t s函数读一完整的行

用标准I / O函数f g e t s从标准输入一次读一行，当键入文件结束字符（通常是C t r l - D）作为
行的第1个字符时，f g e t s返回一个n u l l指针，于是循环终止，进程也就终止。

。f o r k对父进程返回新子进程的非负进程I D，对子进程则返回0。

以_ t结尾的这些数据类型被称为原始系统数据类型。它们通常在头文件< s y s / t y p e s . h >中定
义(头文件< u n i s t d . h >应已包括该头文件)

当U N I X函数出错时，往常返回一个负值，而且整型变量e r r n o通常设置为具有特定信息的一
个值。例如，o p e n函数如成功执行则返回一个非负文件描述符，如出错则返回－1。在o p e n出错
时，有大约1 5种不同的e r r n o值(文件不存在，许可权问题等)。某些函数并不返回负值而是使用
另一种约定。例如，返回一个指向对象的指针的大多数函数，在出错时，将返回一个null指针。
文件< e r r n o . h >中定义了变量e r r n o以及可以赋与它的各种常数。这些常数都以E开头，另外，
U N I X手册第2部分的第1页， intro(2) 列出了所有这些出错常数。例如，若e r r n o等于常数
E A C C E S，这表示产生了权限问题(例如，没有打开所要求文件的权限)。P O S I X定义e r r n o为：
extern int errno;

用户I D为0的用户为根( r o o t )或超级用户( s u p e r u s e r )。

很多条件会产生信号。有两种键盘方式，分别称为中断键(interrupt key，通常是D e l e t e键
或C t r l - C )和退出键(quit key，通常是C t r l - \ )，它们被用于中断当前运行进程。另一种产生信号
的方法是调用名为k i l l的函数。在一个进程中调用此函数就可向另一个进程发送一个信号。当
然这样做也有些限制：当向一个进程发送信号时，我们必需是该进程的所有者。